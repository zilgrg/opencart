<?php class ssb_helper extends Controller { function __construct(){ global $registry;parent::__construct($registry);} static private $Instance =NULL;static public function getInstance() { if(self::$Instance==NULL){ $class=__CLASS__;self::$Instance=new $class;} return self::$Instance;} private $languages=array();private $def_language='';public function getLanguages(){ if(count($this->languages)){ $languages=$this->languages;}else{ $this->load->model('localisation/language');$languages=$this->model_localisation_language->getLanguages();} $normalize_language=array();foreach($languages as $key=> $val){ if(!$val['status'])continue;if(is_int($key)){ $normalize_language[$val['code']]=$val;}else{ $normalize_language[$key]=$val;} } $this->languages=$normalize_language;return $normalize_language;} public function getActiveLang(){ $languages=$this->getLanguages();$act_lang=0;foreach ($languages as $l_code=> $l_data){ if($l_data['status']){ $act_lang++;} } return $act_lang;} public function getDefaultLanguage(){ if($this->def_language){ return $this->def_language;}else{ $store_id=$this->config->get('config_store_id') !==NULL ? $this->config->get('config_store_id'):0;$query=$this->db->query("SELECT value FROM `".DB_PREFIX."setting` WHERE `group` = 'config' AND `key` = 'config_language' AND `store_id` = ".$store_id);$this->def_language=$query->row['value'];return $this->def_language;} } public function getLang_Code_Id($data){ $languages=$this->getLanguages();$respond;if(is_int($data)){ foreach ($languages as $l_code=> $val){ if($val['language_id']==$data) $respond=$l_code;} }else{ $respond=$languages[$data]['language_id'];} return $respond;} public function getArrayLangCode(){ $languages=$this->getLanguages();$respond=array();foreach ($languages as $l_code=> $val){ array_push($respond,$l_code);} return $respond;} public function getAssocArrayLangCode(){ $languages=$this->getLanguages();$respond=array();foreach ($languages as $l_code=> $val){ $respond[$l_code]=$val['language_id'];} return $respond;} public function getAssocArrayCodeLang(){ $languages=$this->getLanguages();$respond=array();foreach ($languages as $l_code=> $val){ $val['code']=$l_code;$respond[$val['language_id']]=$val;} return $respond;} public function getLangFromUrl() { $l_code=$this->getDefaultLanguage();$lang_default=array( 'code' => $l_code,'language_id'=> $this->getLang_Code_Id($l_code) );if (isset($this->request->get['_route_'])) { $parts=explode('/',$this->request->get['_route_']);}else{ return $lang_default;} $lang_inURL=array();foreach ($parts as $part) { $part=trim($part);if (empty($part) ) continue;$query_lang=$this->db->query("SELECT language_id, code FROM ".DB_PREFIX."language WHERE code = '" . $this->db->escape($part) . "'");if($query_lang->num_rows){ $lang_inURL['code'] =$query_lang->row['code'];$lang_inURL['language_id']=$query_lang->row['language_id'];} } if (count($lang_inURL)){ $respond=$lang_inURL;}else{ $respond=$lang_default;} return $respond;} public function setLangForUrl($link,$language) { foreach($this->getArrayLangCode() as $l_code){ $link=str_replace('/'.$l_code,'',$link);} $config_lang=$this->getDefaultLanguage();if (trim($language)==trim($config_lang)) unset($language);$url_data=parse_url($link);if (strpos('a'.$url_data['scheme'].'a','https') ) { $link=$this->config->get('config_ssl');} else { $link=$this->config->get('config_url');} if (isset($language) ) $link.=$language.'/';if (isset($url_data['path']) ) { $link_array=explode('/',$link);$temp_path=explode('/',$url_data['path']);foreach ($temp_path as $key=> $value) { if(!empty($value)){ if (in_array($value,$link_array)) unset($temp_path[$key]);} } $url_data['path']=implode('/',$temp_path);if(substr($url_data['path'],0,1)=='/') $url_data['path']=substr($url_data['path'],1);$link.=$url_data['path'];} if (isset($url_data['query']) ) $link.='?'.$url_data['query'];$link=rtrim($link,"/");return $link;} public function redirect($url,$status=302) { header('Status: '.$status);header('Location: '.str_replace(array('&amp;',"\n","\r"),array('&','',''),$url));exit();} public function fix_parse_bug ($data) { if (strpos($data['host'],'?') ) { $data['host']=explode('?',$data['host']);$data['query']=$data['host'][1];$data['host']=$data['host'][0];if(!isset($data['path'])) $data['path']='';$data['query']=$data['query'].$data['path'];$data['path']='/';} return $data;} public function succErrInit(&$data){ if (isset($this->success['success'])) { $data['success']=$this->success['success'];} else if(isset($this->session->data['success'])) { $data['success']=$this->session->data['success'];unset ($this->session->data['success']);} else { $data['success']='';} if (isset($this->error['warning'])) { $data['error_warning']=$this->error['warning'];} else if(isset($this->session->data['error'])) { $data['error']=$this->session->data['error'];unset ($this->session->data['error']);}else { $data['error_warning']='';} } public function selfURL(){ if(!isset($_SERVER['REQUEST_URI'])) $suri=$_SERVER['PHP_SELF'];else $suri=$_SERVER['REQUEST_URI'];$s=empty($_SERVER["HTTPS"]) ? '':($_SERVER["HTTPS"]=="on") ? "s":"";$sp=strtolower($_SERVER["SERVER_PROTOCOL"]);$pr=substr($sp,0,strpos($sp,"/")).$s;$pt=($_SERVER["SERVER_PORT"]=="80") ? "":(":".$_SERVER["SERVER_PORT"]);return $pr."://".$_SERVER['SERVER_NAME'].$pt.$suri;} } ?>
