<?php class gen_images extends Controller { private $ssb_data;private $gen_helper;private $ssb_helper;private $transliteration;private $seo_data=array();private $imgArr=array();private $def_data=array( 'entity_cat' => '','entity_name'=> '','CPBI' => 'all','id_entity' => '','testgenerator'=> false,'pack' => 0 );function __construct(){ global $registry;parent::__construct($registry);require_once DIR_CONFIG.'ssb_library/ssb_helper.php';$this->ssb_helper=ssb_helper::getInstance();require_once DIR_CONFIG.'ssb_library/ssb_data.php';$this->ssb_data=ssb_data::getInstance();require_once DIR_CONFIG.'ssb_library/admin/generators/gen_helper.php';$this->gen_helper=gen_helper::getInstance();require_once DIR_CONFIG.'ssb_library/admin/transliteration/transliteration.php';$this->transliteration=transliteration::getInstance();} static private $Instance =NULL;static public function getInstance() { if(self::$Instance==NULL){ $class=__CLASS__;self::$Instance=new $class;} return self::$Instance;} public function generate($data){ $time_start=microtime(true);extract(array_merge($this->def_data,$data));$res_count=0;$res_seo_data=array();if($entity_name=='all'){ $meta_entities=$this->ssb_data->getMatadata('Entites');foreach($meta_entities[$entity_cat] as $entity=> $val){ $this->doGenerate($entity_cat,$entity,$id_entity,$testgenerator,$pack);$res_count+=$this->g_count;$res_seo_data=array_merge($res_seo_data,$this->seo_data);} }else{ $this->doGenerate($entity_cat,$entity_name,$id_entity,$testgenerator,$pack);$res_count=$this->g_count;$res_seo_data=$this->seo_data;} $time_end=microtime(true);$time=$time_end-$time_start;return array('time'=> $time,'count'=> $res_count,'seo_data'=> $res_seo_data);} public function doGenerate($entity_cat,$CPBI,$id_entity='',$testgenerator,$pack){ $this->setVars_Common($entity_cat,$CPBI,$testgenerator,$pack);if($id_entity){ $CPBI_item=$this->ssb_data->getCPBI_item($CPBI,$id_entity);$productData =$CPBI_item['data'][$id_entity];$this->genProcess_Image($productData,$id_entity);if($this->status)$this->g_count++;}else{ $data_product=$this->ssb_data->getCPBI('product','images',$this->pack);$productsData =$data_product['data'];foreach($productsData as $p_id=> $productData){ $this->genProcess_Image($productData,$p_id);if($this->testgenerator){ if($this->g_count>20)break;} } if($this->testgenerator){ $this->endSeoData('product');} } } private function setVars_Common($entity_cat,$CPBI,$testgenerator,$pack=0){ $setting =$this->ssb_data->getSetting();$this->national_lang=isset($setting['entity']['images']['product']['national_lang'])? $setting['entity']['images']['product']['national_lang']:false;$this->seo_data =array();$this->g_count =0;$this->status =false;$this->pack =$pack;$this->entity_cat =$entity_cat;$this->CPBI =$CPBI;$this->testgenerator=$testgenerator;$this->defLanguage =$this->ssb_helper->getDefaultLanguage();$this->specialPatterns=$this->ssb_data->getPatterns('special');$setting_entities=$this->ssb_data->getSetting();$this->template =$setting_entities['entity'][$entity_cat][$CPBI]['data'];$this->templ_objs =$this->gen_helper->parseTemplate($entity_cat,$CPBI,$this->template);$this->replacinArr=$this->ssb_data->getReplacingArr($entity_cat,$CPBI);} private function genProcess_Image($productData,$p_id){ $this->status=false;$productData=$productData[$this->defLanguage];$meta_alias=$this->ssb_data->getMatadata('CPBI',array('val'=>'alias'));$orig_name=$seo_string=$productData[$meta_alias['product']['name']];if($this->template !=''){ $seo_string=$this->gen_helper->getSeoString( $this->templ_objs,$this->template,$this->specialPatterns,$productData,'product',$this->defLanguage,$this->entity_cat,$this->replacinArr);}elseif(count($this->replacinArr)){ $param=array('product'=> 'pn','category'=> 'cn','brand'=> 'bn','info'=> 'in');$param=$param['product'];if(is_array($this->replacinArr[$param])){ $search =$this->replacinArr[$param]['search'];$replace=$this->replacinArr[$param]['replace'];$seo_string=str_replace($search,$replace,$seo_string);} } $seo_string=mb_substr($seo_string,0,84);if($productData['image']){ $o_path=$productData['image'];$suffix='-'.$p_id;$n_path=$this->getNewImagePath($o_path,$seo_string,$suffix);if($o_path !=$n_path AND file_exists(DIR_IMAGE.$o_path)){ if(!$this->testgenerator){ $this->renameProcess($o_path,$n_path);$this->g_count++;} } } $sql_pi="SELECT image , product_image_id FROM ".DB_PREFIX."product_image WHERE product_id = ".$p_id;$query_pi=$this->db->query($sql_pi);foreach($query_pi->rows as $pi){ if($pi['image']){ $o_path=$pi['image'];$suffix='--'.$pi['product_image_id'];$n_path=$this->getNewImagePath($o_path,$seo_string,$suffix);if($o_path !=$n_path AND file_exists(DIR_IMAGE.$o_path)){ if(!$this->testgenerator){ $this->renameProcess($o_path,$n_path);$this->g_count++;} } } } if($this->testgenerator AND $productData['image']){ $this->fillSeoData($orig_name,$o_path,$n_path);$this->g_count++;} } private function renameProcess($o_path,$n_path){ rename(DIR_IMAGE.$o_path,DIR_IMAGE.$n_path);$meta_EntitiesInDB=$this->ssb_data->getMatadata('EntitiesInDB',array('images','product'));$MD_EntitiesInDB=$meta_EntitiesInDB['images']['save'];foreach($MD_EntitiesInDB['table'] as $table){ $sql="UPDATE ".DB_PREFIX.$table." SET ".$MD_EntitiesInDB['column']." = '".$n_path ."' WHERE image = '". $o_path ."'";$this->db->query($sql);} } private function fillSeoData($name,$o_path,$n_path){ $this->seo_data[]="<tr>".$this->gen_helper->addTD($name).$this->gen_helper->addTD($o_path).$this->gen_helper->addTD($n_path)."</tr>";} private function endSeoData($CPBI){ $templates_text='<span class="label label-warning">'.$this->template.'</span>';$language_text=$this->language->load('module/superseobox');$header='      <tr><td class="caption" colspan="4">Template for images of '.$language_text['text_entity_name_'.$CPBI].': '.$templates_text.'</td></tr>      <tr>       <th>'.$language_text['text_entity_name_'.$CPBI].' name</th>       <th>Old image</th>       <th>New image</th>      </tr>      ';array_unshift($this->seo_data,$header);$this->seo_data[]='<tr><th colspan="4">...etc.</th></tr>';$this->seo_data[]='<tr><style>#modal-testGenerate .modal-header .nav-pills{display:none;}</style></tr>';} private function getNewImagePath($o_path,$n_image,$suffix=''){ if(!$o_path) return '';$n_image=$this->transliteration->get($n_image,$this->national_lang).$suffix;if($this->national_lang){ $from=array ('á','é','ó','ú','ü','ñ','¿','¡');$to =array ('a','e','o','u','u','n','','i');$n_image=str_replace($from,$to,$n_image);} $parts=explode ('/',$o_path);$count_parts=count($parts);$o_image=$parts[$count_parts-1];$o_image=substr($o_image,0,strripos($o_image,'.'));$parts[$count_parts-1]=str_replace($o_image,$n_image,$parts[$count_parts-1]);$n_path=implode('/',$parts);return $n_path;} } ?>
