<?php class ssb_data extends Controller { static private $Instance =NULL;private $ssb_default;private $ssb_helper;function __construct(){ global $registry;parent::__construct($registry);require_once DIR_CONFIG.'ssb_library/ssb_default.php';$this->ssb_default=ssb_default::getInstance();require_once DIR_CONFIG.'ssb_library/ssb_helper.php';$this->ssb_helper=ssb_helper::getInstance();} static public function getInstance() { if(self::$Instance==NULL){ $class=__CLASS__;self::$Instance=new $class;} return self::$Instance;} public function getDefault($param=false){ $ssb_default=$this->ssb_default->get_default();$respond;if($param){ $respond=$ssb_default[$param];}else{ $respond=$ssb_default;} return $respond;} public function getCommonSetting($param=false){ $ssb_setting=$this->getSetting();$respond=array();if($param){ if(isset($ssb_setting['commonSetting'][$param])){ $respond=$ssb_setting['commonSetting'][$param];} }else{ $respond=$ssb_setting['commonSetting'];} return $respond;} public function getTotalItems($CPBI,$entity_category='',$max=false){ if($max){ $max=array();$max[]=$this->getTotalItems('product');$max[]=$this->getTotalItems('category');$max[]=$this->getTotalItems('brand');$max[]=$this->getTotalItems('info');return max($max);} if($entity_category !='descrip' AND $entity_category !='related_prod'){ $entity_category_forCache='';}else{ $entity_category_forCache=$entity_category.'.';} $total=$this->cache->get('ssb.total.'.$entity_category_forCache.$CPBI);if (isset($total) AND is_int($total)) { return $total;} if($entity_category !='descrip' AND $entity_category !='related_prod'){ $entity_category_forCache='';}else{ $entity_category_forCache=$entity_category.'_';} if (isset($_SESSION['ssb_total'.$entity_category_forCache.$CPBI])) { return $_SESSION['ssb_total'.$entity_category_forCache.$CPBI];} $total=0;switch ($CPBI) { case 'product':$this->load->model('catalog/product');$total=$this->model_catalog_product->getTotalProducts();break;case 'category':$this->load->model('catalog/category');$total=$this->model_catalog_category->getTotalCategories();break;case 'brand':$this->load->model('catalog/manufacturer');$total=$this->model_catalog_manufacturer->getTotalManufacturers();break;case 'info':$this->load->model('catalog/information');$total=$this->model_catalog_information->getTotalInformations();break;case 'STAN_urls':$total=42;break;case 'CPBI_urls':$total+=$this->getTotalItems('product');$total+=$this->getTotalItems('category');$total+=$this->getTotalItems('brand');$total+=$this->getTotalItems('info');break;case 'all':switch ($entity_category) { case 'descrip':$total+=$this->getTotalItems('product');$total+=$this->getTotalItems('category');$total+=$this->getTotalItems('brand');break;case 'related_prod':$total=$this->getTotalItems('product');break;default:$total+=$this->getTotalItems('product');$total+=$this->getTotalItems('category');$total+=$this->getTotalItems('brand');$total+=$this->getTotalItems('info');} break;} if($entity_category !='descrip' AND $entity_category !='related_prod'){ $entity_category_forCache='';}else{ $entity_category_forCache=$entity_category.'.';} $this->cache->set('ssb.total.'.$entity_category_forCache.$CPBI,$total);if($entity_category !='descrip' AND $entity_category !='related_prod'){ $entity_category_forCache='';}else{ $entity_category_forCache=$entity_category.'_';} $_SESSION['ssb_total'.$entity_category_forCache.$CPBI]=$total;return $total;} public function getGenPack($gen_pack_number,$CPBI,$entity_category=''){ $gen_limit=$this->getPackLimit($CPBI,$entity_category);$gen_pack=array( 'start'=> $gen_pack_number*$gen_limit,'limit'=> $gen_limit );return $gen_pack;} public function getPackLimit($CPBI,$entity_category=''){ $entity_category_forCache=$entity_category !='' ? $entity_category.'_':'';if (isset($_SESSION['ssb_'.$entity_category_forCache.$CPBI])) { return $_SESSION['ssb_'.$entity_category_forCache.$CPBI];} $act_lang=$this->ssb_helper->getActiveLang();$gen_limit=1100;if($entity_category !='related_prod' AND $entity_category !='images' AND $entity_category !='urls' AND $entity_category !='reviews'){ $limits=array('1'=>500,'2'=>260,'3'=>150,'4'=>120,'more'=>80);$gen_limit=isset($limits[(string)$act_lang]) ? $limits[(string)$act_lang]:$limits['more'];}else{ $limits=array( 'urls' => array('1'=>200,'2'=>100,'3'=>75,'4'=>48,'more'=>25),'images' => array('1'=>150,'2'=>150,'3'=>150,'4'=>150,'more'=>150),'related_prod'=> array('1'=>20,'2'=>10,'3'=>6,'4'=>4,'more'=>2),'reviews' => array('1'=>150,'2'=>100,'3'=>60,'4'=>40,'more'=>20) );$gen_limit=isset($limits[$entity_category][(string)$act_lang]) ? $limits[$entity_category][(string)$act_lang]:$limits[$entity_category]['more'];} $total_items_max=$this->getTotalItems($CPBI,$entity_category,true);if($entity_category !='images'){ if($total_items_max < 5000){ $gen_limit=$gen_limit * 3;}elseif($total_items_max < 10000){ $gen_limit=$gen_limit * 2;} } $_SESSION['ssb_'.$entity_category_forCache.$CPBI]=$gen_limit;return $gen_limit;} public function getGenPackTotal($CPBI,$entity_category=''){ $totalItems=$this->getTotalItems($CPBI,$entity_category);$gen_limit =$this->getPackLimit($CPBI,$entity_category);if($totalItems > $gen_limit){ $genPackTotal=ceil($totalItems/$gen_limit);}else{ $genPackTotal=1;} return $genPackTotal;} public function getTotalGenerate(){ if(isset($_SESSION['ssb_totalGenerateValue'])){ $totalGenerateValue=$_SESSION['ssb_totalGenerateValue'];}else{ $totalGenerateValue=array( 'count'=> 0,'time'=> 0 );} return $totalGenerateValue;} public function addTotalGenerate($count,$time=0){ if(isset($_SESSION['ssb_totalGenerateValue'])){ $totalGenerateValue=$_SESSION['ssb_totalGenerateValue'];$value=array( 'count'=> $totalGenerateValue['count']+$count,'time'=> $totalGenerateValue['time']+$time );}else{ $value=array( 'count'=> $count,'time'=> $time );} $_SESSION['ssb_totalGenerateValue']=$value;} public function setTotalGenerate($count,$time=0){ $value=array( 'count'=> $count,'time'=> $time );$_SESSION['ssb_totalGenerateValue']=$value;} public function getClientData(){ $ssb_setting=$this->getSetting();return $ssb_setting['clientData'];} public function setClientData($name,$id_order,$e_mail){ $setting=$this->getSetting();$setting['clientData']=array( 'name' => $name,'id_order'=> $id_order,'e_mail'=> $e_mail );$this->setSetting($setting);} public function getSetting($param=false){ $this->load->model('setting/setting');$ssb_setting=$this->model_setting_setting->getSetting('superseobox');if(!$ssb_setting){return false;} $respond;if($param){ $respond=isset($ssb_setting[$param]) ? $ssb_setting[$param]:false;}else{ $respond=$ssb_setting;} return $respond;} public function setSetting($setting){ $this->load->model('setting/setting');$this->model_setting_setting->editSetting('superseobox',$setting);} public function delSetting(){ $this->load->model('setting/setting');$this->model_setting_setting->deleteSetting('superseobox');} public function getTotalSEOField($CPBI){ $this->load->model('superseobox/index');$data_CPBI=$this->model_superseobox_index->getTotalSEOField($CPBI);return $data_CPBI;} public function saveGenEditorContent($data){ $this->load->model('superseobox/index');$respond=$this->model_superseobox_index->saveGenEditorContent($data);return $respond;} public function getCPBI_item($CPBI,$id_item){ $this->load->model('superseobox/index');$CPBI_item=$this->model_superseobox_index->getCPBI_item($CPBI,$id_item);return $CPBI_item;} public function getCPBI($CPBI,$categoryEntity='',$gen_pack_number=0,$internal_entity=''){ $this->load->model('superseobox/index');$data_CPBI=$this->model_superseobox_index->getCPBI($CPBI,$categoryEntity,$gen_pack_number,$internal_entity);return $data_CPBI;} public function getReplacingArr($entity_cat,$CPBI){ $entities=$this->getSetting('entity');if($entity_cat=='urls'){ $entity=$entities[$entity_cat]['CPBI_urls']['data'][$CPBI];}else{ $entity=$entities[$entity_cat][$CPBI];} $replacing=(isset($entity['replacing']) AND is_array($entity['replacing'])) ? $entity['replacing']:array();return $replacing;} public function getSpecialPatterns(){ $specialPatterns=$this->cache->get('ssb.sp');if($specialPatterns || is_array($specialPatterns)){ return $specialPatterns;} $this->load->model('setting/setting');$config=$this->model_setting_setting->getSetting('config');$settingPatterns=$this->getPatterns('setting');$specialPatterns=$this->getPatterns('info',array('val'=> 'special'));$specialPatternsValue=array();$languages=$this->ssb_helper->getArrayLangCode();$tools=$this->getSetting('tools');$seo_store=$tools['seo_store'];foreach ($specialPatterns as $key=> $val){ if($key='sn'){ foreach($languages as $l_code){ $config_name='';if($seo_store['status']){ $config_name=$this->getSeoStore('config_name',$l_code);} $specialPatternsValue['sn'][$l_code]=$config_name ? $config_name:$config['config_name'];} } if($key='st'){ foreach($languages as $l_code){ $config_title='';if($seo_store['status']){ $config_title=$this->getSeoStore('config_title',$l_code);} $specialPatternsValue['st'][$l_code]=$config_title ? $config_title:$config['config_title'];} } if($key='wc'){ $specialPatternsValue['wc']=$this->getWC();} if($key='wt'){ $specialPatternsValue['wt']=$this->getWT();} } return $specialPatternsValue;} public function getMatadata($data='all',$param=''){ $respond=array();if($data=='all'){ $respond['Entites'] =$this->ssb_default->get_MD_Entites();$respond['CategoryEntites']=$this->ssb_default->get_MD_CategoryEntites();$respond['CPBI'] =$this->ssb_default->get_MD_CPBI();$respond['EntitiesInDB']=$this->ssb_default->get_MD_EntitiesInDB();}else{ $func ='get_MD_'.$data;$respond=$this->ssb_default->$func($param);} return $respond;} public function getPatterns($data='',$param=''){ if($data=='info'){ $respond=$this->ssb_default->get_patternsInfo($param);}elseif($data=='setting'){ $respond=$this->getSetting('patternsSettings');} elseif($data=='special'){ $respond=$this->getSpecialPatterns();} return $respond;} public function clearCache(){ $files=glob(DIR_CACHE.'cache.ssb.*');if ($files) { foreach ($files as $file) { if (file_exists($file)) { unlink($file);clearstatcache();} } } } public function setCategoryEntityStatus(){ $setting =$this->getSetting();foreach($setting['categoryEntity'] as $entity_cat=> $val){ $status=$this->getEntityStatus($entity_cat);$setting['categoryEntity'][$entity_cat]['status']=$status;} $this->setSetting($setting);} public function getEntityStatus($entity_cat,$entity='all',$internal_entity=''){ $setting =$this->getSetting();if(!$setting){return false;} $status=false;if($entity=='all'){ foreach($setting['entity'][$entity_cat] as $entity=> $val){ if(isset($val['status']) AND $val['status']) $status=true;} }else{ if($internal_entity){ $status=$setting['entity'][$entity_cat][$entity]['data'][$internal_entity]['status'];}else{ $status=$setting['entity'][$entity_cat][$entity]['status'];} } return $status;} public function updateSocButtonsStatus(){ $setting =$this->getSetting();$status=0;foreach($setting['tools']['soc_buttons']['data'] as $name=> $val){ if($val['status'])$status=1;} $setting['tools']['soc_buttons']['status']=$status;$this->setSetting($setting);} public function setEntityStatus($status,$entity_cat,$entity='all',$internal_entity=''){ $setting =$this->getSetting();if($entity=='all'){ foreach($setting['entity'][$entity_cat] as $entity_=> $val){ $setting['entity'][$entity_cat][$entity_]['status']=$status;} if($entity_cat=='urls'){ $this->setEntityStatus($status,'urls','CPBI_urls','all');} }elseif($entity=='CPBI_urls'){ if($internal_entity !='' AND $internal_entity !='all'){ $setting['entity'][$entity_cat][$entity]['data'][$internal_entity]['status']=$status;$status_=false;foreach($setting['entity'][$entity_cat][$entity]['data'] as $entity_=> $val_){ if($val_['status']){ $status_=true;} } $setting['entity'][$entity_cat][$entity]['status']=$status_;}elseif($internal_entity=='' OR $internal_entity=='all'){ foreach($setting['entity'][$entity_cat][$entity]['data'] as $entity_=> $val_){ $setting['entity'][$entity_cat][$entity]['data'][$entity_]['status']=$status;} $setting['entity'][$entity_cat][$entity]['status']=$status;} }else{ $setting['entity'][$entity_cat][$entity]['status']=$status;} $this->setSetting($setting);} public function getTotalPower(){ $powerEntities=$this->ssb_default->get_Power_of_Entities();$setting =$this->getSetting();$seoPower=0;foreach($setting['entity'] as $categorEntity=> $entities){ foreach($entities as $entity=> $val){ if(isset($val['status']) AND $val['status']==1){ if($entity=='CPBI_urls'){ $internal_entity_power=0;foreach($val['data'] as $internal_entity_name=> $val_){ if($val_['status']==1){ $internal_entity_power+=$powerEntities[$categorEntity][$entity][$internal_entity_name];} } $powerEntities[$categorEntity][$entity]=$internal_entity_power;} $seoPower+=$powerEntities[$categorEntity][$entity];} } } foreach($setting['tools'] as $toolName=> $tooldata){ if($tooldata['status']==true){ $seoPower+=$powerEntities['tools'][$toolName];} } return $seoPower;} public function getWT($prepare=false,$towns=''){ $respond=array();if($towns){ $wt_data=$towns;}else{ $patternsSettings=$this->getSetting('patternsSettings');$wt_data=$patternsSettings['wt']['data'];} if($prepare){ $languages=$this->ssb_helper->getArrayLangCode();$t_count=0;foreach($wt_data as $l_key=> $data){ $t_count=count($data);break;} for($ii=0;$ii<$t_count;$ii++){ $i=0;foreach($languages as $l_code){ $respond[$ii][$i][]=$wt_data[$l_code][$ii];$i++;} } }else{ $respond=$wt_data;} return $respond;} public function setWT($towns,$l_code){ $settings=$this->getSetting();$settings['patternsSettings']['wt']['data'][$l_code]=$towns;$this->setSetting($settings);} public function getWC($prepare=false,$countries=''){ $respond=array();if($countries){ $wc_data=$countries;}else{ $patternsSettings=$this->getSetting('patternsSettings');$wc_data=$patternsSettings['wc']['data'];} if($prepare){ $languages=$this->ssb_helper->getArrayLangCode();foreach($wc_data as $l_key=> $data){ $geonameIds=array_keys($data);break;} $ii=0;foreach($geonameIds as $geonameId){ $i=0;foreach($languages as $l_code){ $respond[$ii][$i][]=$wc_data[$l_code][$geonameId];$i++;} $ii++;} }else{ $respond=$wc_data;} return $respond;} public function setWC($contries,$l_code){ $settings=$this->getSetting();$settings['patternsSettings']['wc']['data'][$l_code]=$contries;$this->setSetting($settings);} public function getSeoStore($key,$l_code=false){ $result=false;if(!$l_code){ $l_code=$this->config->get('config_language');if(!isset($l_code)){ $l_code=isset($_SESSION['language']) ? $_SESSION['language']:'';} } $store_id=$this->config->get('config_store_id');if(!$store_id){ $store_id=0;} if($l_code){ $tools =$this->getSetting('tools');$result=isset($tools['seo_store']['data'][$store_id][$l_code][$key]) ? $tools['seo_store']['data'][$store_id][$l_code][$key]:'';} return $result;} public function getReviewText($l_code=false){ require_once DIR_CONFIG.'ssb_library/admin/generators/ssb_review.php';$ssb_review=ssb_review::getInstance();$respond=$ssb_review->getText($l_code);return $respond;} public function getReviewName($data=array('page'=> 1,'l_code'=> '')){ require_once DIR_CONFIG.'ssb_library/admin/generators/ssb_review.php';$ssb_review=ssb_review::getInstance();$respond=$ssb_review->getName($data);return $respond;} public function getDBchange(){ $respond=$this->ssb_default->get_DB_change();return $respond;} } ?>
