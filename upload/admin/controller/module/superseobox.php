<?php class ControllerModuleSuperseobox extends Controller { private $defaultData;private $ssb_data;private $ssb_table;private $ssb_helper;private $transliteration;private $error =array();private $success =array();function __construct(){ global $registry;parent::__construct($registry);require_once DIR_CONFIG.'ssb_library/ssb_data.php';$this->ssb_data=ssb_data::getInstance();require_once DIR_CONFIG.'ssb_library/ssb_table.php';$this->ssb_table=ssb_table::getInstance();require_once DIR_CONFIG.'ssb_library/ssb_helper.php';$this->ssb_helper=ssb_helper::getInstance();require_once DIR_CONFIG.'ssb_library/admin/transliteration/transliteration.php';$this->transliteration=transliteration::getInstance();} public function install() { $this->db->query('ALTER TABLE '.DB_PREFIX.'setting MODIFY value MEDIUMTEXT;');$this->ssb_table->changeTables($this->ssb_data->getDBchange());$default_data=$this->ssb_data->getDefault();$default_data=$this->installLanguagePattern($default_data);$this->ssb_data->setSetting($default_data);$sql="UPDATE ".DB_PREFIX."setting SET `value`='1' WHERE `group`='config' AND `key`='config_seo_url'";$this->db->query($sql);} private function installLanguagePattern($setting){ foreach($setting['entity'] as $entity_cat=> $val_cat){ foreach($val_cat as $entity=> $val){ if($entity=='CPBI_urls'){ foreach($val['data'] as $intern_entity_name=> $intern_entity_val){ $setting['entity'][$entity_cat][$entity]['data'][$intern_entity_name]['data']=$this->getLanguagePattern($intern_entity_val['pattern']);} } if($entity=='STAN_urls'){ $setting['entity'][$entity_cat][$entity]['data']=$this->getStanUrls($val['data']);} if(!isset($val['pattern'])) continue;$setting['entity'][$entity_cat][$entity]['data']=$this->getLanguagePattern($val['pattern']);} } return $setting;} private function getStanUrls($stan_urls){ $languages =$this->ssb_helper->getLanguages();$result =array();$i=0;foreach($stan_urls as $stan_url){ foreach ($languages as $l_code=> $language) { if(isset($result[$i])){ $result[$i][1][$l_code]=$stan_url[1];}else{ $result[$i]=array($stan_url[0],array($l_code=> $stan_url[1]));} } $i++;} return $result;} public function uninstall(){ $this->ssb_data->delSetting();} public function index($template='index.tpl') { $this->data=$this->language->load('module/superseobox');$this->document->setTitle($this->language->get('heading_title'));$this->setUpdateText();if($this->needUpdateVer()) $this->doUpdateVer();$this->addScriptStyle();$this->ssb_helper->succErrInit($this->data);$this->data['breadcrumbs']=$this->getBreadCrumbs();$this->setDataForInterface();$this->setURLs();$this->load->model('design/layout');$this->data['layouts']=$this->model_design_layout->getLayouts();$this->template='module/superseobox/'.$template;$this->children=array( 'common/header','common/footer' );$this->response->setOutput( $this->render() );} private function setSiteMapURL(){ $sql="SELECT keyword FROM ".DB_PREFIX."url_alias WHERE query = 'feed/google_sitemap';";$exist_keyword=$this->db->query($sql);if(!$exist_keyword->num_rows){ $sql="INSERT INTO ".DB_PREFIX."url_alias (query, keyword, auto_gen) VALUES ('feed/google_sitemap', 'sitemap.xml', 'STAN_urls');";$this->db->query($sql);} } private function saveSetting ($data,$metaData,$additionData){ if(!is_array($data))return 'All done!';if(isset($additionData['gener_descrip_prod_for_category']) AND $additionData['gener_descrip_prod_for_category'] !='' AND $additionData['gener_descrip_prod_for_category'] !='all'){ $categor_id=$additionData['gener_descrip_prod_for_category'];$data['entity']['descrip']['product']['category_data'][$categor_id]=$data['entity']['descrip']['product']['data'];unset($data['entity']['descrip']['product']['data']);} $active_data =$this->ssb_data->getSetting();if(isset($additionData['save_replacing_table'])){ $entityData=$this->parseEntity($metaData['entity']);if($entityData['category']['name']=='CPBI_urls'){ $active_data['entity'][$entityData['category']['name']]['data'][$entityData['internal_entity']['name']]['replacing']='';}else{ $active_data['entity'][$entityData['category']['name']][$entityData['entity']['name']]['replacing']='';} } if(isset($additionData['changeSitemapStatus'])){ if($data['tools']['sitemap']['status']){ $sitemap_data=array('google_sitemap_status'=> 1);$this->setSiteMapURL();}else{ $sitemap_data=array('google_sitemap_status'=> 0);} $this->load->model('setting/setting');$this->model_setting_setting->editSetting('google_sitemap',$sitemap_data);} $new_data=array_replace_recursive ($active_data,$data);$this->ssb_data->setSetting($new_data);if(isset($data['tools']['soc_buttons']['data'])){ $this->ssb_data->updateSocButtonsStatus();} return 'Saving done!';} public function refreshProdDescrip(){ $data=$this->request->post['data'];$category=$data['category'];$active_data =$this->ssb_data->getSetting();$entity_prod=$active_data['entity']['descrip']['product'];$active_data['entity']['descrip']=$this->getRefreshLangPattern($active_data['entity']['descrip']);$respond=array();if($data=='all'){ $respond=$entity_prod['data'];}else{ $respond=isset($entity_prod['category_data'][$category]) ? $entity_prod['category_data'][$category]:$entity_prod['data'];} $languages=$this->ssb_helper->getLanguages();foreach($respond as $lang_key=> $val){ if(!$languages[$lang_key]['status']) unset($respond[$lang_key]);} echo json_encode($respond);} public function ajax(){ list($request_data,$request_metaData,$request_additionData)=$this->parsePostAndGet();$this->$request_metaData['action']($request_data,$request_metaData,$request_additionData);} private function parsePostAndGet(){ $this->request->post=array_replace_recursive($this->request->post,$this->request->get);$data=array();$data[0]=isset($this->request->post['data']) ? $this->request->post['data']:'';$data[1]=isset($this->request->post['metaData']) ? $this->request->post['metaData']:'';$data[2]=isset($this->request->post['additionData']) ? $this->request->post['additionData']:'';return $data;} private function testGenerate($data,$metaData,$additionData=''){ $entityData=$this->parseEntity($metaData['entity']);$entity_cat=$entityData['category']['name'];$entity_name=$entityData['entity']['name'];$gen_data=$this->processGenerate($data,$metaData,$additionData,true);$data=array( 'total_items' => $gen_data['count'],'total_time'=> $gen_data['time'],'seo_text' => implode(' ',$gen_data['seo_data']),'status' => 'ajax-reload' );echo json_encode($data);} private function prepareGenerate($data,$metaData,$additionData=''){ $this->ssb_data->clearCache();$this->saveSetting ($data,$metaData,$additionData);$entityData=$this->parseEntity($metaData['entity']);$entity_cat=$entityData['category']['name'];$entity_name=$entityData['entity']['name'];$internal_entity=$entityData['internal_entity']['name'];$this->ssb_data->getCPBI($entity_name,$entity_cat,0,$internal_entity);$this->ssb_data->setTotalGenerate(0,0);if($internal_entity){ $total_items=$this->ssb_data->getTotalItems($internal_entity,$entity_cat);}else{ $total_items=$this->ssb_data->getTotalItems($entity_name,$entity_cat);} if($entity_name=='STAN_urls'){ $total_genPack=0;}else{ if($internal_entity){ $total_genPack=$this->ssb_data->getGenPackTotal($internal_entity,$entity_cat);}else{ $total_genPack=$this->ssb_data->getGenPackTotal($entity_name,$entity_cat);} } $total_text='Found '.$total_items.' items for generating.';$confirm_text=$entity_name=='all' ? 'Please, confirm start generator '.$entityData['category']['text_name'].' for all pages':'Please, confirm start generator '.$entityData['category']['text_name'].' for pages of '.$entityData['entity']['text_name'];$confirm_text.='<p class="info-area">You can click on "Testing generator" and see result work SEO generator on a few random items for check desired result. After that you can corrected template or click on button "Start generate". </p>';$data=array( 'entity_category' => $entityData['category']['name'],'total_items' => $total_items,'total_genPack' => $total_genPack,'total_text' => $total_text,'confirm_text' => $confirm_text );echo json_encode($data);} private function startGenerate($data,$metaData,$additionData=''){ $this->ssb_data->setTotalGenerate(0,0);$entityData =$this->parseEntity($metaData['entity']);$entity_cat =$entityData['category']['name'];$entity_name =$entityData['entity']['name'];$internal_entity =$entityData['internal_entity']['name'];$this->parsePostAndGet();if(!(isset($additionData['condition']) AND ($additionData['condition']=='gen_only_for_empty' OR $additionData['condition']=='gen_append_to_end'))){ include_once(DIR_CONFIG.'ssb_library/admin/generators/clearSEO.php');$clearSEO=clearSEO::getInstance();$clearSEO->clear($entityData);} $data=array( 'process' => 'go' );echo json_encode($data);} private function processGenerate($data,$metaData,$additionData='',$testgenerator=false){ $entityData =$this->parseEntity($metaData['entity']);$entity_cat =$entityData['category']['name'];$entity_name =$entityData['entity']['name'];$internal_entity =$entityData['internal_entity']['name'];if(!isset($metaData['pack'])){ $metaData['pack']=0;} $CPBI_data=$this->ssb_data->getCPBI($entity_name,$entity_cat,$metaData['pack'],$internal_entity);if(!$testgenerator){ if($CPBI_data['total'] !=0 OR ($metaData['pack']==0 AND $entity_name=='STAN_urls')){ $process='go';}else{ $process='stop';} echo json_encode(array('process'=> $process,'pack'=> $metaData['pack']));if($process=='stop'){ return false;} } $entity_name=$internal_entity ? $internal_entity:$entity_name;$file_data=$this->getFileGenerator($entity_cat);require_once($file_data['file']);$generator=call_user_func(array($file_data['class'],'getInstance'));$data=array( 'entity_cat' => $entity_cat,'entity_name'=> $entity_name,'testgenerator'=> $testgenerator,'additionData'=> $additionData,'pack' => $metaData['pack'] );$gen_data=$generator->generate($data);$this->ssb_data->addTotalGenerate($gen_data['count'],$gen_data['time']);return $gen_data;} private function endGenerate($data,$metaData,$additionData=''){ $entityData =$this->parseEntity($metaData['entity']);$entity_cat =$entityData['category']['name'];$entity_name =$entityData['entity']['name'];$internal_entity=$entityData['internal_entity']['name'];$this->ssb_data->setEntityStatus(true,$entity_cat,$entity_name,$internal_entity);$this->ssb_data->setCategoryEntityStatus();$this->data=$this->language->load('module/superseobox');$gen_data=$this->ssb_data->getTotalGenerate();$data=array( 'total_items' => $gen_data['count'],'total_time'=> $gen_data['time'],'alert_text'=> sprintf($this->language->get('alert_'.$metaData['action']),$entityData['category']['text_name'],$entityData['entity']['text_name'],$gen_data['count']),'status' => 'refresh','entityData'=> $entityData,'genStatus' => true,'power' => $this->ssb_data->getTotalPower() );if($entity_cat=='images'){ } $this->setSiteMapURL();echo json_encode($data);} private function getFileGenerator($entity_cat){ $file=DIR_CONFIG.'ssb_library/admin/generators/gen_'.$entity_cat.'.php';if (file_exists($file)) { $file_generator=DIR_CONFIG.'ssb_library/admin/generators/gen_'.$entity_cat.'.php';$class_generator='gen_'.$entity_cat;} else { $MD_CategoryEntites=$this->ssb_data->getMatadata('CategoryEntites');if(isset($MD_CategoryEntites[$entity_cat]['gen_file'])){ $file_generator=DIR_CONFIG.'ssb_library/admin/generators/'.$MD_CategoryEntites[$entity_cat]['gen_file'].'.php';$class_generator=$MD_CategoryEntites[$entity_cat]['gen_file'];}else{ echo 'error file generator';} } return array('file'=> $file_generator,'class'=> $class_generator);} private function changeAutoGenerate($data,$metaData,$additionData=''){ $this->saveSetting ($data,$metaData,$additionData);echo 1;} private function prepareClearGenerate($data,$metaData,$additionData=''){ $entityData =$this->parseEntity($metaData['entity']);$entity_cat =$entityData['category']['name'];$entity_name =$entityData['entity']['name'];$internal_entity =$entityData['internal_entity']['name'];$data=$this->ssb_data->getCPBI($entity_name,$entity_cat,0,$internal_entity );if($internal_entity){ $total_items=$this->ssb_data->getTotalItems($internal_entity,$entity_cat);}else{ $total_items=$this->ssb_data->getTotalItems($entity_name,$entity_cat);} $total_text='Found '.$total_items.' items for clearing.';$entity_name=$entityData['internal_entity']['name'] ? $entityData['internal_entity']['text_name']:$entityData['entity']['text_name'];if($entityData['entity']['name']=='CPBI_urls' AND !$entityData['internal_entity']['text_name']){ $entityData['entity']['name']='all';} $confirm_text=$entityData['entity']['name']=='all' ? 'Please, confirm start clearing '.$entityData['category']['text_name'].' for all pages':'Please, confirm start clearing '.$entityData['category']['text_name'].' for pages of '.$entity_name;$data=array( 'total_items' => $total_items,'total_text'=> $total_text,'confirm_text'=> $confirm_text );echo json_encode($data);} private function startClearGenerate($data,$metaData,$additionData=''){ $entityData=$this->parseEntity($metaData['entity']);include_once(DIR_CONFIG.'ssb_library/admin/generators/clearSEO.php');$clearSEO=clearSEO::getInstance();$clear_data=$clearSEO->clear($entityData);$this->ssb_data->setEntityStatus(false,$entityData['category']['name'],$entityData['entity']['name'],$entityData['internal_entity']['name']);$this->ssb_data->setCategoryEntityStatus();$entity_name=$entityData['internal_entity']['name'] ? $entityData['internal_entity']['text_name']:$entityData['entity']['text_name'];$data=array( 'total_items' => $clear_data['total_count'],'total_time'=> $clear_data['total_time'],'alert_text'=> sprintf($this->language->get('alert_'.$metaData['action']),$entityData['category']['text_name'],$entity_name,$clear_data['total_count']),'status' => 'refresh','entityData'=> $entityData,'genStatus' => false,'power' => $this->ssb_data->getTotalPower() );echo json_encode($data);} private function save($data,$metaData,$additionData=''){ $alert=$this->saveSetting ($data,$metaData,$additionData);$this->respondAnswer($metaData,$alert);} private function getTown($data,$metaData,$additionData=''){ $languages=$this->ssb_helper->getArrayLangCode();$wt=$this->ssb_data->getWT(true);$featureCode_data=isset($data['patternsSettings']['wt']['featureCode']) ? $data['patternsSettings']['wt']['featureCode']:'';$patternsSettings=$this->ssb_data->getSetting('patternsSettings');$featureCode_setting=$patternsSettings['wt']['featureCode'];$country_data=$data['patternsSettings']['wt']['country'];$country_setting=$patternsSettings['wt']['country'];if(!count($wt) OR $country_data !=$country_setting OR $featureCode_data !=$featureCode_setting){ include_once DIR_CONFIG.'ssb_library/admin/generators/geo_helper.php';$geo_helper=geo_helper::getInstance();$towns_data=array();foreach($languages as $l_code){ $towns=$geo_helper->getTowns($l_code,$country_data,$featureCode_data);$towns_data[$l_code]=$towns;} $wt=$this->ssb_data->getWT(true,$towns_data);} $data=array( 'featureCode'=> $featureCode_data,'country' => $country_data,'towns' => $wt,'languages' => $languages,'status' => 'ajax-reload' );echo json_encode($data);} private function getCountry($data,$metaData,$additionData=''){ $languages=$this->ssb_helper->getArrayLangCode();$wc=$this->ssb_data->getWC(true);$continent_data=isset($data['patternsSettings']['wc']['continent']) ? $data['patternsSettings']['wc']['continent']:'';$patternsSettings=$this->ssb_data->getSetting('patternsSettings');$continent_setting=$patternsSettings['wc']['continent'];if(!count($wc) OR $continent_data !=$continent_setting){ include_once DIR_CONFIG.'ssb_library/admin/generators/geo_helper.php';$geo_helper=geo_helper::getInstance();$continents_data=array();foreach($languages as $l_code){ $continents=$geo_helper->getCountries($l_code,$continent_data);$continents_data[$l_code]=$continents;$this->ssb_data->setWC($continents,$l_code);} $wc=$this->ssb_data->getWC(true,$continents_data);} $data=array( 'continent' => $continent_data,'continents' => $wc,'languages' => $languages,'status' => 'ajax-reload' );echo json_encode($data);} private function getAjaxPage($data,$metaData,$additionData){ $this->index('i_content.tpl');} private function getModal($data,$metaData,$additionData){ if(isset($additionData['function'])){ $function=$additionData['function'];$func_data=isset($additionData['data']) ? $additionData['data']:'';call_user_func(array($this,$function),$func_data);} $this->data['patterns'] =$this->ssb_data->getPatterns('info');$this->data['patterns_setting']=$this->ssb_data->getPatterns('setting');$this->data['data']=$this->ssb_data->getSetting();$this->setURLs();$this->load->model('design/layout');$this->data['layouts']=$this->model_design_layout->getLayouts();$this->template='module/superseobox/'.$data['m_name'].'.tpl';$this->response->setOutput( $this->render() );} private function getGenEditorContent($data,$metaData,$additionData){ $this->setURLs();$type=$data['type'];$this->data['content'] =$this->ssb_data->getTotalSEOField($data);$this->data['lang_default'] =$this->ssb_helper->getDefaultLanguage();$this->data['languages'] =$this->ssb_helper->getAssocArrayLangCode();$this->data['languages_array'] =$this->ssb_helper->getAssocArrayCodeLang();$this->load->model('design/layout');$this->data['layouts']=$this->model_design_layout->getLayouts();$this->template='module/superseobox/seo_generator/tools/edit_list/'.$type.'.tpl';$this->children=array( 'common/header','common/footer' );$this->response->setOutput( $this->render() );} private function saveGenEditorContent($data,$metaData,$additionData){ $respond=$this->ssb_data->saveGenEditorContent($data);} private function newSupport($data,$metaData,$additionData){ $this->language->load('module/superseobox');$respond=array();if ($this->validate()) { if (strlen($this->request->post['mail_name']) < 5 || strlen($this->request->post['mail_name']) > 32) { $respond['error'][]=$this->language->get('mail_error_name');} if ((strlen($this->request->post['mail_email']) > 96) || !preg_match('/^[^\@]+@.*\.[a-z]{2,6}$/i',$this->request->post['mail_email'])) { $respond['error'][]=$this->language->get('mail_error_email');} if (strlen($this->request->post['mail_order_id']) < 3 || (int)$this->request->post['mail_order_id']==0) { $respond['error'][]=$this->language->get('mail_error_order_id');} if (strlen($this->request->post['mail_message']) < 20 || strlen($this->request->post['mail_message']) > 2400) { $respond['error'][]=$this->language->get('mail_error_message');} if (!$respond) { $subject='[Paladin SEO Manager] ('.$this->request->post['type'].') '.$this->request->post['mail_name'];$message='Order ID: '.$this->request->post['mail_order_id']."\n\n";$message.=$this->request->post['mail_message'];$mail=new Mail();$mail->protocol=$this->config->get('config_mail_protocol');$mail->parameter=$this->config->get('config_mail_parameter');$mail->hostname=$this->config->get('config_smtp_host');$mail->username=$this->config->get('config_smtp_username');$mail->password=$this->config->get('config_smtp_password');$mail->port=$this->config->get('config_smtp_port');$mail->timeout=$this->config->get('config_smtp_timeout');$mail->setTo('opencart.ssb@gmail.com');$mail->setFrom($this->request->post['mail_email']);$mail->setSender($this->request->post['mail_name']);$mail->setSubject(html_entity_decode($subject,ENT_QUOTES,'UTF-8'));$mail->setText(html_entity_decode($message,ENT_QUOTES,'UTF-8'));$mail->send();$json['success']=$this->language->get('mail_success');} } if(!isset($respond['error'])){ if($this->request->post['type']=='SUPPORT'){ $text='You have successfully contacted Paladin\'s Support.We will contact you within 24 hours.Thanks.';     }elseif($this->request->post['type'] == 'IMPROVE'){      $text = 'You have successfully contacted Paladin\'s admin. If we find your idea useful, we will contact with you. Thanks for your idea.';} $respond['alert']=$text;$this->ssb_data->setClientData($this->request->post['mail_name'],$this->request->post['mail_order_id'],$this->request->post['mail_email']);} echo json_encode($respond);} private function newImport($data,$metaData,$additionData){ $respond=array();$data=json_decode(base64_decode($data['import']),true);if(!is_array($data)) { $respond['error'][]='Your import data is corrupted!';}else{ $this->ssb_data->setSetting($data);$respond['alert']='Success: You have imported new settings for Paladin SEO Manager!';} echo json_encode($respond);} private function newExport($data,$metaData,$additionData){ $this->language->load('module/superseobox');$export_data=$this->ssb_data->getSetting();$export_data=base64_encode(json_encode($export_data));$respond=array( 'data' => $export_data,'alert' => $this->language->get('text_get_export') );echo json_encode($respond);} private function setReplacingData($data){ $this->data=$this->language->load('module/superseobox');list($entity_cat,$CPBI) =$data;if($CPBI=='CPBI_urls' AND isset($data[2])){ $CPBI=$data[2];} $this->data['entity_cat'] =$entity_cat;$this->data['CPBI'] =$CPBI;$meta_CPBI=$this->ssb_data->getMatadata('CPBI');$this->data['MD_CPBI_parameters']=$meta_CPBI[$CPBI]['parameters'];$this->data['pattern_info']=$this->ssb_data->getPatterns('info');$this->data['replacing']=$this->ssb_data->getReplacingArr($entity_cat,$CPBI);} private function setReviewTemlateData(){ $this->data['review_text']=$this->ssb_data->getReviewText();$this->data['languages']=$this->ssb_helper->getLanguages();$this->data['patterns_setting']=$this->ssb_data->getPatterns('setting');$this->data['MD_PatternAddVal']=$this->ssb_data->getMatadata('PatternAddVal');} private function setReviewNameData(){ $this->data['content']=$this->ssb_data->getReviewName();$this->data['languages']=$this->ssb_helper->getLanguages();} private function saveReviewName($data){ require_once DIR_CONFIG.'ssb_library/admin/generators/ssb_review.php';$ssb_review=ssb_review::getInstance();$ssb_review->save($data,'review_name');$this->respondAnswer('',"Saving done!");} private function saveReviewTemplate($data){ require_once DIR_CONFIG.'ssb_library/admin/generators/ssb_review.php';$ssb_review=ssb_review::getInstance();$ssb_review->save($data,'review_template');$this->respondAnswer('',"Saving done!");} private function deleteReviewName($data){ require_once DIR_CONFIG.'ssb_library/admin/generators/ssb_review.php';$ssb_review=ssb_review::getInstance();$ssb_review->delete($data,'review_name');$this->respondAnswer('',"Deleting done!");} private function deleteReviewText($data){ require_once DIR_CONFIG.'ssb_library/admin/generators/ssb_review.php';$ssb_review=ssb_review::getInstance();$ssb_review->delete($data,'review_template');$this->respondAnswer('',"Deleting done!");} private function getNameByCode($data){ $content=$this->ssb_data->getReviewName($data);$this->data['l_data'] =$content['names'][$data['l_code']];$this->data['pagination'] =$content['pagination'];$this->data['l_code'] =$data['l_code'];$this->setURLs();$this->load->model('design/layout');$this->data['layouts']=$this->model_design_layout->getLayouts();$this->template='module/superseobox/seo_generator/modal/review_name_list.tpl';$this->response->setOutput( $this->render() );} private function deleteAllRewievItem($data){ require_once DIR_CONFIG.'ssb_library/admin/generators/ssb_review.php';$ssb_review=ssb_review::getInstance();$ssb_review->deleteAll($data);$this->respondAnswer('',"Deleting done!",$data);} private function restoreAllRewievItem($data){ require_once DIR_CONFIG.'ssb_library/admin/generators/ssb_review.php';$ssb_review=ssb_review::getInstance();$ssb_review->restoreAll($data);$this->respondAnswer('',"Restoring done!",$data);} private function respondAnswer($metaData,$alert='',$data='',$status=true){ if(isset($metaData['entity'])){ $entityData=$this->parseEntity($metaData['entity']);$this->language->load('module/superseobox');;if(!isset($this->request->post['additionData']['save_replacing_table'])){ $alert=sprintf($this->language->get('alert_'.$metaData['action']),$entityData['category']['text_name'],$entityData['entity']['text_name']);} } $respond=array( 'status' => $status,'data' => $data,'alert' => $alert,'power' => $this->ssb_data->getTotalPower() );echo json_encode($respond);} private function parseEntity ($entityData){ $this->language->load('module/superseobox');;$entityData=explode("-",$entityData);$respond_entity['category']=array( 'name' => $entityData[0],'text_name'=> $this->language->get('text_category_name_'.$entityData[0]) );$respond_entity['entity']=array( 'name' => $entityData[1],'text_name'=> $this->language->get('text_entity_name_'.$entityData[1]) );$respond_entity['internal_entity']=array('name'=> '','text_name'=> '');if(isset($entityData[2])){ $respond_entity['internal_entity']=array( 'name' => $entityData[2],'text_name'=> $this->language->get('text_entity_name_'.$entityData[2]) );} return $respond_entity;} private function setDataForInterface(){ $active_data =$this->ssb_data->getSetting();$this->data['languages']=$this->ssb_helper->getLanguages();$this->data['active_lang_code']=$this->ssb_helper->getDefaultLanguage();$this->data['active_lang_id'] =$this->ssb_helper->getLang_Code_Id($this->data['active_lang_code']);foreach($active_data['entity'] as $entity_cat=> $val_cat){ foreach($val_cat as $entity=> $val){ if($entity=='CPBI_urls'){ foreach($val['data'] as $internal_entity=> $internal_val){ if(!isset($internal_val['pattern'])) continue;$active_data['entity'][$entity_cat][$entity]['data']=$this->getRefreshLangPattern($active_data['entity'][$entity_cat][$entity]['data']);} }else{ if(!isset($val['pattern'])) continue;$active_data['entity'][$entity_cat]=$this->getRefreshLangPattern($active_data['entity'][$entity_cat]);} } } $this->ssb_data->setSetting($active_data);$this->data['MD_CategoryEntites'] =$this->ssb_data->getMatadata('CategoryEntites');$this->data['clientData'] =$this->ssb_data->getClientData();$this->data['direction'] =$this->language->get('direction');$this->data['version'] =$active_data['version'];$this->data['data'] =$active_data;$this->data['HTTP_SERVER'] =HTTP_SERVER;$this->data['patterns'] =$this->ssb_data->getPatterns('info');$this->data['patterns_setting']=$this->ssb_data->getPatterns('setting');$this->data['MD_PatternAddVal']=$this->ssb_data->getMatadata('PatternAddVal');$this->data['CPBI_parameters'] =$this->ssb_data->getMatadata('CPBI',array('val'=>'parameters'));$this->data['CPBI_keys'] =$this->ssb_data->getMatadata('CPBI',array('keys'=> true));$this->data['categories'] =$this->getCategories();$this->data['seo_power'] =$this->ssb_data->getTotalPower();$this->load->model('superseobox/index');$this->data['wc_countries'] =$this->model_superseobox_index->getCountries();$this->data['wc_continents'] =$this->model_superseobox_index->getContinents();$this->data['token'] =$this->session->data['token'];$this->data['stores'] =$this->getStores();} private function getStores(){ $this->language->load('setting/store');$this->load->model('setting/store');$stores=array();$stores[]=array( 'store_id'=> 0,'name' => $this->config->get('config_name').$this->language->get('text_default') );$results=$this->model_setting_store->getStores();foreach ($results as $result) { $stores[]=array( 'store_id'=> $result['store_id'],'name' => $result['name'] );} return $stores;} private function getCategories(){ $data=$this->ssb_data->getCPBI('category');$language_id=(int)$this->config->get('config_language_id');$categories=array();foreach ($data['data'] as $category=> $val) { $categories[]=array( 'category_id'=> $category,'name' => $val[$this->ssb_helper->getLang_Code_Id((int)$language_id)]['cn'] );} return $categories;} private function setURLs(){ $urls=array( 'action'=> $this->url->link('module/superseobox','token='.$this->session->data['token'],'SSL'),'info'=> $this->url->link('module/superseobox/info','token='.$this->session->data['token'],'SSL'),'cancel'=> $this->url->link('extension/module','token='.$this->session->data['token'],'SSL'),'ajax'=> $this->url->link('module/superseobox/ajax','token='.$this->session->data['token'],'SSL'),'support'=> 'http://smartshopbox.com/support/getproducts/','param_setting_descrip'=> $this->url->link('module/superseobox/ajax','token='.$this->session->data['token'].'&metaData[action]=getModal&data[m_name]=seo_generator/modal/param_setting_descrip','SSL'),'param_descrip'=> $this->url->link('module/superseobox/ajax','token='.$this->session->data['token'].'&metaData[action]=getModal&data[m_name]=seo_generator/modal/param_descrip','SSL'),'about_info'=> $this->url->link('module/superseobox/ajax','token='.$this->session->data['token'].'&metaData[action]=getModal&data[m_name]=about_info','SSL'),'about_url'=> 'http://smartshopbox.com/support/getproducts.php?exception=psm-full' );$this->data['urls']=$urls;} private function addScriptStyle(){ $this->document->addScript( 'view/javascript/ckeditor/ckeditor.js' );$this->document->addScript( 'view/stylesheet/superseobox/bootstrap/js/bootstrap.min.js' );$this->document->addStyle( 'view/stylesheet/superseobox/bootstrap/css/bootstrap.min.css' );$this->document->addStyle( 'view/stylesheet/superseobox/bootstrap/css/bootstrap-responsive.min.css' );$this->document->addScript( 'view/javascript/superseobox/plugin/jquery.dd.min.js');$this->document->addScript( 'view/javascript/superseobox/plugin/grider.js');$this->document->addScript( 'view/javascript/superseobox/plugin/intro.js');$this->document->addScript( 'view/javascript/superseobox/plugin/prettify/prettify.js');$this->document->addScript( 'view/javascript/superseobox/plugin/jscolor/jscolor.js');$this->document->addScript( 'view/javascript/superseobox/plugin/jquery.knob.js');$this->document->addScript( 'view/javascript/superseobox/plugin/cookie_jq.js' );$this->document->addScript( 'view/javascript/superseobox/plugin/block_ui.js' );$this->document->addScript( 'view/javascript/superseobox/plugin/iphone-style-checkboxes.js');$this->document->addScript( 'view/javascript/superseobox/plugin/jqBootstrapValidation-1.3.7.min.js');$this->document->addScript( 'view/javascript/superseobox/index.js' );$this->document->addStyle( 'view/stylesheet/superseobox/style.css' );} private function getRefreshLangPattern($entity_categ){ $languages=$this->ssb_helper->getLanguages();foreach($languages as $l_code=> $language){ foreach($entity_categ as $entity_key=> $val){ if(!isset($val['data'][$l_code])){ $patterns=$this->getLanguagePattern($val['pattern']);$entity_categ[$entity_key]['data'][$l_code]=$patterns[$l_code];} } } $lang_code_array=array_keys($languages);foreach($entity_categ as $entity_key=> $val){ foreach($val['data'] as $lang_key=> $val){ if (!in_array($lang_key,$lang_code_array)) { unset($entity_categ[$entity_key]['data'][$lang_key]);} } } return $entity_categ;} private function getLanguagePattern($val){ $languages=$this->ssb_helper->getLanguages();$patterns =array();foreach ($languages as $l_code=> $language) { $patterns[$l_code]=$val;} return $patterns;} private function getBreadCrumbs(){ $this->language->load('module/superseobox');$breadcrumbs=array();$breadcrumbs[]=array( 'text' => $this->language->get('text_home'),'href' => $this->url->link('common/home','token='.$this->session->data['token'],'SSL'),'separator'=> false );$breadcrumbs[]=array( 'text' => $this->language->get('text_module'),'href' => $this->url->link('extension/module','token='.$this->session->data['token'],'SSL'),'separator'=> ' :: ' );$breadcrumbs[]=array( 'text' => $this->language->get('heading_title'),'href' => $this->url->link('module/superseobox','token='.$this->session->data['token'],'SSL'),'separator'=> ' :: ' );return $breadcrumbs;} private function needUpdateVer(){ $def_version =$this->ssb_data->getDefault('version');$act_version =$this->ssb_data->getSetting('version');if($def_version==$act_version) return false;return true;} private function doUpdateVer(){ $active_data =$this->ssb_data->getSetting();$default_data=$this->ssb_data->getDefault();$new_data=array_replace_recursive ($default_data,$active_data);$new_data['version']=$default_data['version'];$this->ssb_data->setSetting($new_data);$this->changeTables($active_data['version'],$new_data['version']);$this->setUpdateData($active_data['version'],$new_data['version']);} private function setUpdateText(){ $header="";$footer="<i class=\"custom-icon-off\"></i>";$update_texts=array( '2.0.0'=>$header."<dt>Fixed problem:</dt>\       <dd>1. solved problem with edit information pages in the tab \"SEO edit items\"</dd>\       <dd>2. solved problem with showing not active products in the generator related products</dd>\       <dd>3. solved problem with function \"mysql_real_escape_string\" in the generator</dd>\       <dt>New functions:</dt>\       <dd>1. changed info header for the tabs of generator</dd>\       <dd>2. added css support for the block of languages for the Flatro-Nine theme</dd>\       <dd>3. added new generator for H1 tag on the pages of products, categories and brands</dd>".$footer,'2.1.0'=>$header."<dt>Fixed problem:</dt>\       <dd>1. solved problem with mysqli database</dd>\       <dd>2. solved problem with search example product, when one of your category there are no has products</dd>\       <dd>3. solved problem with search field and search page for Opencart ver 1.5.4</dd>\       <dd>4. solved problem with image generator in the national mode, when you have spanish chars</dd>\       <dt>New functions:</dt>\       <dd>1. added support for Social Button in HTTPS mode</dd>".$footer,'2.2.0'=>$header."<dt>Fixed problem:</dt>\       <dd>1. Increased speed download of pages</dd>".$footer,'2.3.0'=>$header."<dt>Fixed problem:</dt>\       <dd>1. added suport social buttons for Shopica and rgen themes</dd>\       <dd>2. changed place for inserting \"panel bar\" from \"after <body>\" to \"before </body>\"</dd>\       <dd>3. solved problem with autogenerate function for seo H1 tags</dd>\       <dd>4. solved problem with tags for version of Opencart ver 1.5.2 and 1.5.3</dd>\       <dd>5. changed method of inserting snippet to the pages for more stable works</dd>\       <dd>6. solved problem with site map, if you use MySQLi database</dd>\       <dt>New functions:</dt>\       <dd>1. added support for module \"dvenced menu\"</dd>\       <dd>2. added support for module \"Quick Edit\"</dd>".$footer,'2.4.0'=>$header."<dt>Fixed problem:</dt>\       <dd>1. with the generator of sitemap, when your urls contain \"&\"</dd>\       <dd>2. solved error \"Undefined index:seo_title in /home/petsite/public_html/mgmadmin/model/superseobox/index.php on line 1\", when you enter to \"edit seo items\"->\"information\"</dd>\       <dt>New functions:</dt>\       <dd>1. created new file \"paladin-seosearch.xml\" in the folder \"vqmod/xml/PALADIN support 3th side\". And if you want use seo url in the search fuction, you can move this file to \"vqmod/xml\", and then testing search field. (this feature works with standard Opencart search field)</dd>\       <dd>2. added function for caching sitemap (reduced time for upload on 400%)</dd>\       <dd>3. added support multistore for sitemap generator</dd>\       <dd>4. improved work with snippet on front site</dd>".$footer,'2.5.0'=>$header."<dt>Fixed problem:</dt>\       <dd>1. with seo urls, which contain the parts with the same text. For example \"open<span style=\"text-decoration: underline;\">cart</span>artsite/cart\".</dd>\       <dd>2. with refresh of templates for generators, when adding new language</dd>\       <dt>New functions:</dt>\       <dd>1. added support for module PavBlog</dd>\       <dd>2. changed style for showing test data</dd>\       <dd>3. added support multi language for the standard Opencart pages (Wish List, My Account, Shopping Cart, Checkout, e.t.c). Now you can write your own texts for urls of these pages in the national language. For do this you must go to \"Generators-> SEO URLs-> Add/Edit/Delete SEO URLs\" and write your own urls in national language. After this you must click on button \"Standart SEO URLs-> Generate!\" and choose mode \"All items\"</dd>\       <dd>4. was changed structure for support 3th plugins and themes for the Paladin. Now if you have the next themes or plugins: </br> - admin quick edit </br> - advanced menu </br> - pav blog </br> - blog system </br> - blog manager </br> - flatro theme </br> - aquacart theme </br> - shoppica theme </br> You must: </br> - go to \"vqmod/xml/PALADIN support 3th side\" </br> - find the needed file </br> - move it to folder \"vqmod/xml\" </br> - clear cache</dd>\       <dd>3. added support multi language for the standard Opencart pages (Wish List, My Account, Shopping Cart, Checkout, e.t.c). Now you can write your own texts for urls of these pages in the national language. For do this you must go to \"Generators-> SEO URLs-> Add/Edit/Delete SEO URLs\" and write your own urls in national language. After this you must click on button \"Standart SEO URLs-> Generate!\" and choose mode \"All items\" </dd>".$footer );$default_data=$this->ssb_data->getDefault();if($this->needUpdateVer()){ $this->data['VER_status']=1;$this->data['update_text']=$update_texts[$default_data['version']];}else{ $this->data['VER_status']=0;$this->data['update_text']='';} } private function changeTables($oldVersion,$newVersion){ $oldVersion=(int)str_replace('.','',$oldVersion);$newVersion=(int)str_replace('.','',$newVersion);if($oldVersion < 200){ $this->ssb_table->changeTables($this->ssb_data->getDBchange());} } private function setUpdateData($oldVersion,$newVersion){ $oldVersion=(int)str_replace('.','',$oldVersion);$newVersion=(int)str_replace('.','',$newVersion);if($oldVersion < 165){ $setting =$this->ssb_data->getSetting();$setting['patternsSettings']['cd']['add_metaData']['default']=array('Ns');$this->ssb_data->setSetting($setting);} if($oldVersion < 170){ $setting =$this->ssb_data->getSetting();$setting['entity']['urls']['CPBI_urls']['data']=array( 'product' => array( 'data'=> array(),'pattern'=> '!pn','status'=>0),'category' => array( 'data'=> array(),'pattern'=> '!cn','status'=>0),'brand' => array( 'data'=> array(),'pattern'=> '!bn','status'=>0),'info' => array( 'data'=> array(),'pattern'=> '!in','status'=>0) );$this->ssb_data->setSetting($setting);foreach($setting['entity']['urls']['CPBI_urls']['data'] as $intern_entity_name=> $intern_entity_val){ $setting['entity']['urls']['CPBI_urls']['data'][$intern_entity_name]['data']=$this->getLanguagePattern($intern_entity_val['pattern']);} $this->ssb_data->setSetting($setting);$CPBI_urls_status=$this->ssb_data->getEntityStatus('urls','CPBI_urls');if($CPBI_urls_status){ $this->ssb_data->setEntityStatus(true,'urls','CPBI_urls','all');} } if($oldVersion < 250){ $setting =$this->ssb_data->getSetting();$setting['entity']['urls']['STAN_urls']['data']=$this->getStanUrls($setting['entity']['urls']['STAN_urls']['data']);$this->ssb_data->setSetting($setting);} } private function validate() { return true;} } if (!function_exists('array_replace_recursive')) { function array_replace_recursive($array,$array1) { $args=func_get_args();$array=$args[0];if (!is_array($array)) { return $array;} for ($i=1;$i < count($args);$i++) { if (is_array($args[$i])) { $array=recurse($array,$args[$i]);} } return $array;} function recurse($array,$array1) { foreach ($array1 as $key=> $value) { if (!isset($array[$key]) || (isset($array[$key]) && !is_array($array[$key]))) { $array[$key]=array();} if (is_array($value)) { $value=recurse($array[$key],$value);} $array[$key]=$value;} return $array;} } ?>
